 static Boolean is_it_a_tree(Integer node_count, ArrayList<Integer> edge_start, ArrayList<Integer> edge_end) {

        if(edge_start.size() != node_count -1){
            return false;
        }

        int[] parent = new int[node_count];

        for(int i=0;i<parent.length;i++){
            parent[i] = i;
        }

        for(int i=0;i<edge_start.size();i++){
            if(!union(parent,edge_start.get(i),edge_end.get(i))){
                return false;
            }
        }

        return true;
    }

    static boolean union(int[] parent,int x,int y){
        int xRoot = find(parent,x);
        int yRoot = find(parent,y);

        if(xRoot == yRoot){
            return false;
        }

        parent[xRoot] = yRoot;
        return true;
            }

          static int find(int[] parent,int x){
                if(x == parent[x]){
                    return x;
                }

                parent[x] = find(parent,parent[x]);
                return parent[x];
 }

