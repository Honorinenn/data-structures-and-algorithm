 static Integer count_islands(ArrayList<ArrayList<Integer>> matrix) {

       int result = 0;

       for (int i = 0 ; i < matrix.size(); i++){
           for (int j = 0 ; j < matrix.get(0).size(); j++){
                if (matrix.get(i).get(j) == 1){
                    result ++;
                    dfs(matrix, i , j, matrix.size(), matrix.get(0).size());
                }
           }
       }
       return result;


    }



    static void dfs(ArrayList<ArrayList<Integer>> matrix, int row, int col, int total_rows, int total_cols){


        matrix.get(row).set(col, 0);

        //above row, left col

        if (row-1 >= 0 && col-1 >= 0 && matrix.get(row-1).get(col-1) == 1){
            dfs(matrix, row-1, col-1, total_rows, total_cols);
        }

        //above row, same  col
         if (row-1 >= 0 && matrix.get(row-1).get(col) == 1){
                     dfs(matrix, row-1, col, total_rows, total_cols);
                }

                 //above row, right col
                if (row-1 >=0 && col+1 < total_cols && matrix.get(row-1).get(col+1) == 1){
                     dfs(matrix, row-1, col+1, total_rows, total_cols);
                }


                if (col-1 >=0 && matrix.get(row).get(col-1) == 1){
                     dfs(matrix, row, col-1, total_rows, total_cols);
                }


                if (col+1 < total_cols && matrix.get(row).get(col+1) == 1){
                     dfs(matrix, row, col+1, total_rows, total_cols);
                }


                if (row+1 < total_rows && col-1 >=0 && matrix.get(row+1).get(col-1) == 1){
                     dfs(matrix, row+1, col-1, total_rows, total_cols);
                }


                if (row+1 < total_rows && matrix.get(row+1).get(col) == 1){
                     dfs(matrix, row+1, col, total_rows, total_cols);
                }


                if (row+1 < total_rows && col+1 < total_cols && matrix.get(row+1).get(col+1) == 1){
                     dfs(matrix, row+1, col+1, total_rows, total_cols);
                }


            }

