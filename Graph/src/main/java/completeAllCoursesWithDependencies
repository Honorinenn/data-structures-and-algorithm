 static Boolean can_be_completed(Integer n, ArrayList<Integer> a, ArrayList<Integer> b) {

       ArrayList<ArrayList<Integer>> adjacencylist = new ArrayList<ArrayList<Integer>>();
       int[] visited = new int[n];
       int[] departure = new int[n];

       for (int i = 0 ; i < n; i++){
           visited[i] = -1;
           departure[i] = -1;
           adjacencylist.add(new ArrayList<Integer>());
       }

       for (int i = 0 ; i < a.size(); i++){
           adjacencylist.get(a.get(i)).add(b.get(i));
       }

       for (int i = 0 ; i < n; i++){
           if (visited[i] == -1){
               visited[i] = 1;

               boolean canbecompleted = dfs(adjacencylist, visited, departure, i);
               if (!canbecompleted){
                   return false;
               }
           }
       }

       return true;

    }


    static boolean dfs( ArrayList<ArrayList<Integer>> adjacencylist ,
                        int[] visited, int[] departure, int curr){



        departure[curr] = 0;
        for (Integer child: adjacencylist.get(curr)){

            if (visited[child] == -1){
                 visited[child] = 1;
                if (! dfs(adjacencylist, visited, departure, child)){
                    return false;
                }
            } else{
                 if (departure[child] == 0){
                     return false;
                 }
            }

        }

        departure[curr] = 1;
        return true;

    }


