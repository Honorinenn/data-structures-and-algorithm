 static ArrayList<Integer> kth_largest(Integer k, ArrayList<Integer> initial_stream, ArrayList<Integer> append_stream) {
        // Write your code here.

        //Min heap of size k to store initital elements and get the peek
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k,(a,b) -> a-b);

        //Top k elements from initial stream
        for(int i=0;i<k && i<initial_stream.size();i++){
            minHeap.offer(initial_stream.get(i));
        }

        //add rest elements for initial stream and keep  k largets
         for(int i=k;i<initial_stream.size();i++){
             int el = initial_stream.get(i);
             if(el > minHeap.peek()){
                 minHeap.poll();
                 minHeap.offer(el);
             }

        }

        ArrayList<Integer> result = new ArrayList<>();

         for(int i=0;i<append_stream.size();i++){
             int el = append_stream.get(i);

             //if minHeap size is less than k , add el till k
              if(minHeap.size() < k){
                              minHeap.offer(el);
                              result.add(minHeap.peek());
                              continue;
                          }
                            if (el > minHeap.peek()){
                              minHeap.poll();
                              minHeap.offer(el);
                          }

                          result.add(minHeap.peek());

                     }




                     return result;
                 }
