  /*
    * Asymptotic complexity in terms of total length of all given linked lists `n` and `k`:
    * Time: O(n * log(k)).
    * Auxiliary space: O(1).
    * Total space: O(n + k).
    */

    static class pair implements Comparable<pair> {
        int value, index;

        public pair(int value, int index) {
            this.value = value;
            this.index = index;
        }

        @Override
        public int compareTo(pair o) {
            // TODO Auto-generated method stub
            return this.value - o.value;
        }
    }

    static LinkedListNode merge_k_lists(ArrayList<LinkedListNode> lists) {
        LinkedListNode head = null;
        LinkedListNode tail = null;

        PriorityQueue<pair> prioque = new PriorityQueue<>();

        for (int i = 0; i < lists.size(); i++) {
            if (lists.get(i) != null) {
                prioque.add(new pair(lists.get(i).value, i));
            }
        }

        int min_index;
        while (prioque.isEmpty() == false) {
            min_index = prioque.peek().index;
            prioque.poll();

            if (head == null) {
                head = lists.get(min_index);
                tail = lists.get(min_index);
            } else {
                tail.next = lists.get(min_index);
                tail = tail.next;
            }

            lists.set(min_index, lists.get(min_index).next);
            tail.next = null;

            if (lists.get(min_index) != null) {
                prioque.add(new pair(lists.get(min_index).value, min_index));
            }
        }
        return head;
    }
