  /*
    brute_force solution java
    * Asymptotic complexity in terms of size of `numbers`:
    * Time: O(n^2).
    * Auxiliary space: O(1).
    * Total space: O(n).
    */

    static ArrayList<Integer> two_sum(ArrayList<Integer> numbers, int target) {
        ArrayList<Integer> result = new ArrayList<Integer>();

        for (int i = 0; i < numbers.size(); i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                if (numbers.get(i) + numbers.get(j) == target) {
                    result.add(i);
                    result.add(j);
                    return result;
                }
            }
        }
        result.add(-1);
        result.add(-1);
        return result;
    }








     /*
         hashing_solution java
        * Asymptotic complexity in terms of size of `numbers` `n`:
        * Time: O(n).
        * Auxiliary space: O(n).
        * Total space: O(n).
        */

        static ArrayList<Integer> two_sum(ArrayList<Integer> numbers, int target) {
            ArrayList<Integer> result = new ArrayList<Integer>();

            // This Map stores the array element as Key and its index as Value.
            HashMap<Integer, Integer> array_index = new HashMap<Integer, Integer>();

            for (int i = 0; i < numbers.size(); i++) {
                int current = numbers.get(i);
                int required = target - current;

                if (array_index.containsKey(required)) {
                    result.add(array_index.get(required));
                    result.add(i);
                    return result;
                }

                array_index.put(current, i);
            }

            result.add(-1);
            result.add(-1);
            return result;
        }







// My attempt

static ArrayList<Integer> two_sum(ArrayList<Integer> numbers, Integer target) {
        // Write your code here.
        ArrayList<Integer> outcome = new ArrayList<Integer>(2);
        outcome.add(-1);
        outcome.add(-1);

        //find compliment
        int size = numbers.size();
        int j = -1;
        for (int i = 0; i< numbers.size() - 1; i++){
            j = binarySearch(numbers, i + 1, size, target - numbers.get(i));
            if(j>0){
                outcome.set(0,i);
                outcome.set(1,j);
                break;
            }
        }
       return outcome;
    }

    public static int binarySearch(List<Integer> numbers, int start, int end, int target){
        int low = start;
        int high = end;
        int mid, num = 0;
        while(low < high){
            mid = low + (high - low)/2;
            if (mid < start || mid >= end){
                return -1;
            }
            num = numbers.get(mid);
            if(num == target){
                return mid;
            }
            if(num > target){
                low = mid + 1;
            }
            else {
                high = mid -1;
            }
        }
        return -1;
    }

