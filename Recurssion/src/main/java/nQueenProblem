 static ArrayList<ArrayList<String>> find_all_arrangements(Integer n) {
        ArrayList<ArrayList<String>> result = new ArrayList<>();
        int[] column = new int[n];
        for(int i = 0; i < n; i++){
            column[i] = i;
        }
        qhelper(column, 0, n, result);
        return result;
    }

    static void qhelper(int[] column, int index, int n, ArrayList<ArrayList<String>> result){
        // check conflict
        if(checkConflict(column, index-1)) return;
        //base case
        if(index == n){
            result.add(construct(column, n));
        }
        //recursive function
        for(int i = index; i < n; i++){
            swap(column, i,index);
            qhelper(column, index+1, n, result);
            swap(column, i, index);
        }
    }

    static boolean checkConflict(int[] column, int previousQueen){
        for(int i = 0; i < previousQueen; i++){
            if(column[i] == column[previousQueen] || (Math.abs(i-previousQueen) == Math.abs(column[i] - column[previousQueen]))) return true;
        }
        return false;
         }
            static void swap(int[] arr, int a, int b){
                int temp = arr[a];
                arr[a] = arr[b];
                arr[b] = temp;
            }

            static ArrayList<String> construct(int[] column, int n){
                ArrayList<String> arrange = new ArrayList<>();
                char[] arr = new char[n];
                for(int i = 0; i < n; i++){
                   arr[i] = '-';
                }
                for(int i = 0; i < n; i++){
                    arr[column[i]] = 'q';
                    arrange.add(new String(arr));
                    arr[column[i]] = '-';
                }
                return arrange;
            }