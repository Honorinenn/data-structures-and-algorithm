static ArrayList<String> generate_all_expressions(String s, long target) {
        ArrayList<String> res = new ArrayList<>();
        if(s == null || s.length() == 0) return res;
        char[] path = new char[s.length()*2];
        char[] digits = s.toCharArray();
        long n = 0;
        for(int i = 0; i < digits.length; i++) {
          n = n * 10 + (digits[i] - '0');
          path[i] = digits[i];
          helper(res, path, digits, i+1, i+1, 0, n, target);
        }
        return res;
    }

    static void helper(ArrayList<String> res, char[] path, char[] digits, int idx, int length, long prev, long curr, long target) {
        if(idx == digits.length) {
            if(curr + prev == target) {
                res.add(new String(path, 0 , length));
            }
        } else {
            long n = 0;
            int j = length+1;
            for(int i = idx; i < digits.length; i++) {
                n = n * 10 + (digits[i]-'0');
                path[j++] = digits[i];
                path[length] = '*';
                helper(res, path, digits, i+1,j, prev,curr*n, target);
                path[length] = '+';
                helper(res, path, digits, i+1,j, prev+curr ,n, target);
            }
        }
    }
