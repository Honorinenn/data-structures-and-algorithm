TREE AND VARIANTS EXERCISES

1) Problem

Is It A BST
Given a binary tree, check if it is a binary search tree (BST). A valid BST does not have to be complete or balanced.

Consider this definition of a BST:

All nodes values of left subtree are less than or equal to parent node value.
All nodes values of right subtree are greater than or equal to parent node value.
Both left subtree and right subtree must be BSTs.
NULL tree is a BST.
Single node trees (including leaf nodes of any tree) are BSTs.
Example One
Example one

Output:

0
Left child value 200 is greater than the parent node value 100; violates the definition of BST.

Example Two
Example two

Output:

1
Notes
Return true if the input tree is a BST or false otherwise.
Constraints:

0 <= number of nodes <= 100000
-109 <= values stored in the nodes <= 109



2) Problem

Single Value Tree
Given a binary tree, find the number of unival subtrees. An unival (single value) tree is a tree that has the same value in every node.

Example One
Example one

Output:

6
The input tree has a total of 6 nodes. Each node is a root of a subtree. All those 6 subtrees are unival trees.

Example Two
Example two

Output:

5
The input tree has a total of 7 nodes, so there are 7 subtrees. Of those 7, all but two subtrees are unival. The two non-unival subtrees are:

The one rooted in the root node and
The one rooted in the root's right child.
Notes
Constraints:

0 <= number of nodes in the tree <= 105
-109 <= node value <= 109




3) Problem



Print All Paths Of A Tree
Given a binary tree, return all paths from root to leaf.

Example One
Example one

Output:

[
[1, 2, 4],
[1, 2, 5],
[1, 3, 6],
[1, 3, 7]
]
There are four leafs in the given graph, so we have four paths: from the root to every leaf. Each path is a list of the values from the tree nodes on the path, and we have four lists. They can go in any order.

Example Two
Example two

Output:

[
[10, 20, 40],
[10, 20, 50],
[10, 30]
]
There are 3 paths in the tree.

The leftmost path contains values: 10 -> 20 -> 40

The rightmost path contains values: 10 -> 30

The other path contains values: 10 -> 20 -> 50

The order of the paths (order of the lists in the outer list) does not matter, so [[10, 30], [10, 20, 40], [10, 20, 50]] is another correct answer.

Notes
Return a list of integer lists, where each list is representing a path.
The order of the paths (order of the lists in the outer list) does not matter.
Constraints:

0 <= number of nodes in the given tree <= 105
-109 <= value in a node <= 109




4)  Problem




Upside Down
Given a binary tree where every node has either 0 or 2 children and every right node is a leaf node, flip it upside down turning it into a binary tree where all left nodes are leafs.

Example One
Example one input

Output:

Example one output

Example Two
Example two input

Output:

Example two output

The same output tree oriented differently:

Example two alternative output

Notes
Return the root of the output tree.
Constraints:

0 <= number of nodes <= 100000
1 <= node value <= 100000




5) Problem

Merge Two BSTs
Given two Binary Search Trees (BSTs), merge them into a single height-balanced BST.

Example One
Example1 input

Output:

Example1 output

Example Two
Example2 input

Output:

Example2 output

Notes
A node with value equal to the value of the root node can be inserted either in the left or right subtree.
A binary tree is called height-balanced if for each node the following property is satisfied:
The difference in the heights of its left and right subtrees differ by at most 1.
Constraints:

1 <= number of nodes in the given BSTs <= 104
-109 <= node value <= 109





6) Problem


PostOrder Traversal Without Recursion
Given a binary tree, find its post-order traversal without using recursion.

Example
Example one

Output:

[400, 500, 200, 300, 100]
Notes
Constraints:

1 <= number of nodes <= 105
-109 <= value in a node <= 109





7) Problem


Lowest Common Ancestor
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

The LCA of nodes a and b in a tree is defined as the shared ancestor node of a and b that is located farthest from the root of the tree.

Example
Example one

a = 8, b = 9

Output:

5
There are three shared parents of 8 and 9 in this tree: 5, 2, 1. Of those three, the farthest from the root is 5.

Other examples:
LCA(2, 5) = 2
LCA(2, 3) = 1

Notes
A node is considered its own ancestor and its own descendant.
Return the value of the LCA node of the two given nodes.
Constraints:

1 <= number of nodes <= 100000
1 <= node value <= number of nodes
Node values are unique





8)  Problem


Convert A Binary Tree Into A Circular Doubly Linked List

Given the root node of a binary tree, convert it into a circular doubly linked list in-place. The left and the right pointers in nodes are to be used as previous and next pointers, respectively, in the structure that you return.

Returned list should follow the in-order traversal order of the given tree.

The "root" node that you return should be the first node in the in-order traversal order. That "root" node should be connected with the last node in the in-order traversal as if "root" node goes after the last node and last node goes before the "root" node.

Example
Example input

Output:

Example output

Notes
Constraints:

1 <= number of nodes <= 105
-109 <= node value <= 109
Description of the text format of the test cases

You might need this for debugging your solution on IK UpLevel platform.

Input file contains the given tree in the usual binary tree format.

Output file lists node values of the returned data structure:

starting from the returned node,
following right pointers until we reach the last node in the list,
then following left pointers until we come back to the root node.
Example output

Example output

is represented by

[1, 2, 3, 4, 5, 4, 3, 2, 1]
If the returned data structure is not circular or otherwise incorrect, the output may contain the correct portion of it, and you will find an error message in the ERROR field.














TREE PROBLEMS


1) Problem

Preorder Traversal Of A Binary Tree
Given a binary tree, return node values in the preorder traversal order.

Example One
Example one

Output:

[0, 1, 3, 4, 2]
Example Two
Example two

Output:

[0, 1, 2, 3]
Notes
The preorder traversal processes all the nodes of a binary tree by first visiting the root, then recursively visiting its left and right subtrees respectively.

Constraints:

1 <= number of nodes in the given tree <= 20000
0 <= node value < number of nodes
Node values are unique



2) Problem


Inorder Traversal Of A Binary Tree
Given a binary tree, return the inorder traversal of its node values.

Example One
Example one

Output:

[3, 1, 4, 0, 2]
Example Two
Example two

Output:

[1, 3, 2, 0]
Notes
The inorder traversal of a binary tree first visits the left subtree, then the root and finally the right subtree.

Constraints:

1 <= number of nodes in the given tree <= 20000
0 <= node value < number of nodes
Node values are unique






3)  Problem


Postorder Traversal Of A Binary Tree
Given a binary tree, find its postorder traversal.

Example One
Example one

Output:

[3, 4, 1, 2, 0]
Example Two
Example two

Output:

[3, 2, 1, 0]
Notes
The postorder traversal visits all the nodes of a binary tree by recursively visiting the left subtree, then the right subtree and finally visiting the root.

Constraints:

1 <= number of nodes in the tree <= 20000
0 <= node value < number of nodes
No two nodes have the same value





4)  Problem


Level Order Traversal Of A Binary Tree
Given a binary tree, list the node values level by level from left to right.

Example One
Example one

Output:

[
[0],
[1],
[2],
[4],
[3]
]
Example Two
Example two

Output:

[
[2],
[5, 4],
[0, 1, 3, 6]
]
Notes
Constraints:

1 <= number of nodes in the given tree <= 20000
0 <= node value < number of nodes
Node values are unique








5)  Problem


Level Order Traversal Of A Tree
Given a tree, list node values level by level from left to right.

Example One
Example one

Output:

[
[1],
[3, 4, 2],
[5, 6]
]
Example Two
Example two

Output:

[
[1],
[2],
[4],
[3]
]
Notes
Constraints:

1 <= number of nodes <= 20000
1 <= value in a node <= number of nodes
Node values are unique
Root node's value is 1






6)  Problem


Reverse Level Order Traversal Of A Binary Tree
Given a binary tree, return the bottom-up level order traversal of the node values listing each level from left to right.

Example One
Example one

Output:

[
[3, 4],
[1, 2],
[0]
]
Example Two
Example two

Output:

[
[3],
[2],
[1],
[0]
]
Notes
Constraints:

1 <= number of nodes in the given tree <= 20000
0 <= node value < number of nodes
Node values are unique





7)  Problem

Zigzag Level Order Traversal Of A Binary Tree
Given a binary tree, return the zigzag level order traversal of the node values listing the odd levels from left to right and the even levels from right to left.

Example One
Example one

Output:

[
[0],
[2, 1],
[3, 4]
]
Example Two
Example two

Output:

[
[0],
[1],
[2],
[3]
]
Notes
Root node is considered to be at the level 1.

Constraints:

1 <= number of nodes in the given tree <= 20000
0 <= node value < number of nodes
Node values are unique






8)  Problem

Diameter Of A Binary Tree
Given a binary tree, find its diameter.

Example One
Example one

Output:

3
Example Two
Example two

Output:

4
Notes
Diameter of a binary tree is the length of the longest path between any two nodes of the tree.
Length between any two nodes is equal to the number of edges traversed to reach one node from the other.
Constraints:

1 <= number of nodes in the given tree <= 105
0 <= node value < number of nodes
Node values are unique






9)  Problem


Convert Sorted List To Binary Search Tree
Given a linked list with elements sorted in ascending order, convert it into a height-balanced binary search tree.

Example One
Input

Output:

Output

Example Two
Input

Output:

Output

Notes
A binary tree is called height-balanced if for any node, the difference in the heights of its left and right subtree does not exceed one.
Input list does not contain duplicates.
Return the root node of the created hight-balanced BST.
Constraints:

1 <= length of the linked list <= 20000
-109 <= node value <= 109







10)  Problem


Print All Paths That Sum To K
Given a binary tree and an integer k, find all the root to leaf paths that sum to k.

Example One
Example one

k = 80

Output:

[
[10, 25, 45]
[10, 30, 40]
]
Example Two
Example two

k = 10

Output:

[
[5, 5],
[5, 5]
]
Notes
In case there is no root to leaf path with a sum equal to k, return [[-1]].
The order of the paths (order of the lists in the outer list) does not matter.
Constraints:

1 <= number of nodes <= 104
-105 <= value in a node <= 105
-109 <= k <= 109















