TREE AND VARIANTS EXERCISES

1) Problem

Is It A BST
Given a binary tree, check if it is a binary search tree (BST). A valid BST does not have to be complete or balanced.

Consider this definition of a BST:

All nodes values of left subtree are less than or equal to parent node value.
All nodes values of right subtree are greater than or equal to parent node value.
Both left subtree and right subtree must be BSTs.
NULL tree is a BST.
Single node trees (including leaf nodes of any tree) are BSTs.
Example One
Example one

Output:

0
Left child value 200 is greater than the parent node value 100; violates the definition of BST.

Example Two
Example two

Output:

1
Notes
Return true if the input tree is a BST or false otherwise.
Constraints:

0 <= number of nodes <= 100000
-109 <= values stored in the nodes <= 109



2) Problem

Single Value Tree
Given a binary tree, find the number of unival subtrees. An unival (single value) tree is a tree that has the same value in every node.

Example One
Example one

Output:

6
The input tree has a total of 6 nodes. Each node is a root of a subtree. All those 6 subtrees are unival trees.

Example Two
Example two

Output:

5
The input tree has a total of 7 nodes, so there are 7 subtrees. Of those 7, all but two subtrees are unival. The two non-unival subtrees are:

The one rooted in the root node and
The one rooted in the root's right child.
Notes
Constraints:

0 <= number of nodes in the tree <= 105
-109 <= node value <= 109




3) Problem



Print All Paths Of A Tree
Given a binary tree, return all paths from root to leaf.

Example One
Example one

Output:

[
[1, 2, 4],
[1, 2, 5],
[1, 3, 6],
[1, 3, 7]
]
There are four leafs in the given graph, so we have four paths: from the root to every leaf. Each path is a list of the values from the tree nodes on the path, and we have four lists. They can go in any order.

Example Two
Example two

Output:

[
[10, 20, 40],
[10, 20, 50],
[10, 30]
]
There are 3 paths in the tree.

The leftmost path contains values: 10 -> 20 -> 40

The rightmost path contains values: 10 -> 30

The other path contains values: 10 -> 20 -> 50

The order of the paths (order of the lists in the outer list) does not matter, so [[10, 30], [10, 20, 40], [10, 20, 50]] is another correct answer.

Notes
Return a list of integer lists, where each list is representing a path.
The order of the paths (order of the lists in the outer list) does not matter.
Constraints:

0 <= number of nodes in the given tree <= 105
-109 <= value in a node <= 109




4)  Problem




Upside Down
Given a binary tree where every node has either 0 or 2 children and every right node is a leaf node, flip it upside down turning it into a binary tree where all left nodes are leafs.

Example One
Example one input

Output:

Example one output

Example Two
Example two input

Output:

Example two output

The same output tree oriented differently:

Example two alternative output

Notes
Return the root of the output tree.
Constraints:

0 <= number of nodes <= 100000
1 <= node value <= 100000




5) Problem

Merge Two BSTs
Given two Binary Search Trees (BSTs), merge them into a single height-balanced BST.

Example One
Example1 input

Output:

Example1 output

Example Two
Example2 input

Output:

Example2 output

Notes
A node with value equal to the value of the root node can be inserted either in the left or right subtree.
A binary tree is called height-balanced if for each node the following property is satisfied:
The difference in the heights of its left and right subtrees differ by at most 1.
Constraints:

1 <= number of nodes in the given BSTs <= 104
-109 <= node value <= 109





6) Problem


PostOrder Traversal Without Recursion
Given a binary tree, find its post-order traversal without using recursion.

Example
Example one

Output:

[400, 500, 200, 300, 100]
Notes
Constraints:

1 <= number of nodes <= 105
-109 <= value in a node <= 109





7) Problem


Lowest Common Ancestor
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

The LCA of nodes a and b in a tree is defined as the shared ancestor node of a and b that is located farthest from the root of the tree.

Example
Example one

a = 8, b = 9

Output:

5
There are three shared parents of 8 and 9 in this tree: 5, 2, 1. Of those three, the farthest from the root is 5.

Other examples:
LCA(2, 5) = 2
LCA(2, 3) = 1

Notes
A node is considered its own ancestor and its own descendant.
Return the value of the LCA node of the two given nodes.
Constraints:

1 <= number of nodes <= 100000
1 <= node value <= number of nodes
Node values are unique











