 /*
    For your reference:
    class BinaryTreeNode {
        Integer value;
        BinaryTreeNode left;
        BinaryTreeNode right;

        BinaryTreeNode(Integer value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }
    }
    */
    static int count = 0;
    static Integer find_single_value_trees(BinaryTreeNode root) {
        // Write your code here.
        helper(root);
        return count;
    }
    static boolean helper(BinaryTreeNode curr) {
        if (curr == null)
        return true;
        if(curr.left == null && curr.right == null){
            count++;
            return true;
        }

        boolean isLeftUniVal = curr.left != null? helper(curr.left): true;
        boolean isRightUniVal = curr.right != null? helper(curr.right): true;

                int leftVal = curr.left == null? curr.value: curr.left.value;
                int rightVal = curr.right == null? curr.value: curr.right.value;

                boolean isCurrentSubTreeUniVal = isLeftUniVal && isRightUniVal && leftVal == curr.value && rightVal == curr.value;
                if(isCurrentSubTreeUniVal){
                    count++;
                    return true;
                }   else {
                    return false;
                }
            }
