   /*
    For your reference:
    class BinaryTreeNode {
        Integer value;
        BinaryTreeNode left;
        BinaryTreeNode right;

        BinaryTreeNode(Integer value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }
    }
    */
    static ArrayList<ArrayList<Integer>> result = new ArrayList<>();
    static ArrayList<ArrayList<Integer>> zigzag_level_order_traversal(BinaryTreeNode root) {
        // Write your code here.
        rlot_helper(root);
        return result;
    }


    static void rlot_helper(BinaryTreeNode root){
        if (root == null) return;
        LinkedList<BinaryTreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean reverse = false;
        while (queue.size() > 0){

            int queueSize = queue.size();
            ArrayList<Integer> subResult  = new ArrayList<>();
            for(int i = 0 ; i < queueSize; i++){
                BinaryTreeNode subNode = queue.pollFirst();
                if (subNode.left != null) queue.add(subNode.left);
                if (subNode.right != null) queue.add(subNode.right);
                subResult.add(subNode.value);
            }

            if (subResult.size() > 0 ) {
                if (reverse) Collections.reverse(subResult);
                result.add(subResult);
            }
            reverse = ! reverse;
        }
    }
